/**
    RUMP: A Reproducible Untargeted Metabolomics Data Processing Pipeline
    Description  : This file in the configuration of RUMP, including resource allocation and parameters information
    Author       : Xinsong Du
    Creation Date: 11/01/2022
    License      : MIT License
          
    This script is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    This script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    MIT License for more details.
    
    You should have received a copy of the MIT License
    along with this script.  If not, see <https://opensource.org/licenses/MIT>.
    
    For any bugs or problems found, please contact us at
    - xinsongdu@ufl.edu, xinsongdu@gmail.com, djlemas@ufl.edu; 
    - https://github.com/Nextflow4Metabolomics/nextflow4ms-dial
*/

params
{
    input_dir = "data/raw_data/" // The folder including the raw mzML data
    ref = "data/raw_data/SA1.abf" // The reference sample file.
    msdial_config = "data/msdial_params.txt" // The config file for MS-DIAL
    msflo_config = "data/msflo_params.ini" // The confic file for MS-FLO
    
    ms1_library = "data/ms1_lib.txt" // The library file for MS1 annotation
    ms2_library = "data/MSMS-Pos-MassBank.msp" // The library file for MS2 anotation

    max_cpus = 20 // Maximum number of allocated CPU
    max_memory = 200.GB // Maximum number of allocated memory
    max_time = 24.h // Maximum execution time
}

process.container = '/blue/djlemas/share/containers/xinsongdu-metabolomics_software_containerization-v2.img'

process 
{

    withName: peak_detection_msdial
    {
        time =  { check_max( 6.h * task.attempt, 'time' ) }
        max_cpus = { check_max( 3 * task.attempt, 'cpus' ) }
        memory = { check_max( 50.GB * task.attempt, 'memory' ) }
    }
    withName: msflo_download
    {
        time =  '15m'
        max_cpus = 1
        memory = '4 GB'  
    }
    withName: msflo_processing
    {
        time =  { check_max( 6.h * task.attempt, 'time' ) }
        max_cpus = { check_max( 3 * task.attempt, 'cpus' ) }
        memory = { check_max( 50.GB * task.attempt, 'memory' ) }
    }
}